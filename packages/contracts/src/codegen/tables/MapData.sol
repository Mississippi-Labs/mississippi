// SPDX-License-Identifier: MIT
pragma solidity >=0.8.0;

/* Autogenerated file. Do not edit manually. */

// Import schema type
import { SchemaType } from "@latticexyz/schema-type/src/solidity/SchemaType.sol";

// Import store internals
import { IStore } from "@latticexyz/store/src/IStore.sol";
import { StoreSwitch } from "@latticexyz/store/src/StoreSwitch.sol";
import { StoreCore } from "@latticexyz/store/src/StoreCore.sol";
import { Bytes } from "@latticexyz/store/src/Bytes.sol";
import { Memory } from "@latticexyz/store/src/Memory.sol";
import { SliceLib } from "@latticexyz/store/src/Slice.sol";
import { EncodeArray } from "@latticexyz/store/src/tightcoder/EncodeArray.sol";
import { Schema, SchemaLib } from "@latticexyz/store/src/Schema.sol";
import { PackedCounter, PackedCounterLib } from "@latticexyz/store/src/PackedCounter.sol";

bytes32 constant _tableId = bytes32(abi.encodePacked(bytes16(""), bytes16("MapData")));
bytes32 constant MapDataTableId = _tableId;

struct MapDataData {
  uint256 xLen;
  uint256 yLen;
  int256[] mapArray;
}

library MapData {
  /** Get the table's key schema */
  function getKeySchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](1);
    _schema[0] = SchemaType.BYTES32;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's value schema */
  function getValueSchema() internal pure returns (Schema) {
    SchemaType[] memory _schema = new SchemaType[](3);
    _schema[0] = SchemaType.UINT256;
    _schema[1] = SchemaType.UINT256;
    _schema[2] = SchemaType.INT256_ARRAY;

    return SchemaLib.encode(_schema);
  }

  /** Get the table's key names */
  function getKeyNames() internal pure returns (string[] memory keyNames) {
    keyNames = new string[](1);
    keyNames[0] = "key";
  }

  /** Get the table's field names */
  function getFieldNames() internal pure returns (string[] memory fieldNames) {
    fieldNames = new string[](3);
    fieldNames[0] = "xLen";
    fieldNames[1] = "yLen";
    fieldNames[2] = "mapArray";
  }

  /** Register the table's key schema, value schema, key names and value names */
  function register() internal {
    StoreSwitch.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Register the table's key schema, value schema, key names and value names (using the specified store) */
  function register(IStore _store) internal {
    _store.registerTable(_tableId, getKeySchema(), getValueSchema(), getKeyNames(), getFieldNames());
  }

  /** Get xLen */
  function getXLen(bytes32 key) internal view returns (uint256 xLen) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get xLen (using the specified store) */
  function getXLen(IStore _store, bytes32 key) internal view returns (uint256 xLen) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 0, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set xLen */
  function setXLen(bytes32 key, uint256 xLen) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 0, abi.encodePacked((xLen)), getValueSchema());
  }

  /** Set xLen (using the specified store) */
  function setXLen(IStore _store, bytes32 key, uint256 xLen) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 0, abi.encodePacked((xLen)), getValueSchema());
  }

  /** Get yLen */
  function getYLen(bytes32 key) internal view returns (uint256 yLen) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Get yLen (using the specified store) */
  function getYLen(IStore _store, bytes32 key) internal view returns (uint256 yLen) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 1, getValueSchema());
    return (uint256(Bytes.slice32(_blob, 0)));
  }

  /** Set yLen */
  function setYLen(bytes32 key, uint256 yLen) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 1, abi.encodePacked((yLen)), getValueSchema());
  }

  /** Set yLen (using the specified store) */
  function setYLen(IStore _store, bytes32 key, uint256 yLen) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 1, abi.encodePacked((yLen)), getValueSchema());
  }

  /** Get mapArray */
  function getMapArray(bytes32 key) internal view returns (int256[] memory mapArray) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_int256());
  }

  /** Get mapArray (using the specified store) */
  function getMapArray(IStore _store, bytes32 key) internal view returns (int256[] memory mapArray) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getField(_tableId, _keyTuple, 2, getValueSchema());
    return (SliceLib.getSubslice(_blob, 0, _blob.length).decodeArray_int256());
  }

  /** Set mapArray */
  function setMapArray(bytes32 key, int256[] memory mapArray) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setField(_tableId, _keyTuple, 2, EncodeArray.encode((mapArray)), getValueSchema());
  }

  /** Set mapArray (using the specified store) */
  function setMapArray(IStore _store, bytes32 key, int256[] memory mapArray) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setField(_tableId, _keyTuple, 2, EncodeArray.encode((mapArray)), getValueSchema());
  }

  /** Get the length of mapArray */
  function lengthMapArray(bytes32 key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    uint256 _byteLength = StoreSwitch.getFieldLength(_tableId, _keyTuple, 2, getValueSchema());
    unchecked {
      return _byteLength / 32;
    }
  }

  /** Get the length of mapArray (using the specified store) */
  function lengthMapArray(IStore _store, bytes32 key) internal view returns (uint256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    uint256 _byteLength = _store.getFieldLength(_tableId, _keyTuple, 2, getValueSchema());
    unchecked {
      return _byteLength / 32;
    }
  }

  /**
   * Get an item of mapArray
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemMapArray(bytes32 key, uint256 _index) internal view returns (int256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    unchecked {
      bytes memory _blob = StoreSwitch.getFieldSlice(
        _tableId,
        _keyTuple,
        2,
        getValueSchema(),
        _index * 32,
        (_index + 1) * 32
      );
      return (int256(uint256(Bytes.slice32(_blob, 0))));
    }
  }

  /**
   * Get an item of mapArray (using the specified store)
   * (unchecked, returns invalid data if index overflows)
   */
  function getItemMapArray(IStore _store, bytes32 key, uint256 _index) internal view returns (int256) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    unchecked {
      bytes memory _blob = _store.getFieldSlice(
        _tableId,
        _keyTuple,
        2,
        getValueSchema(),
        _index * 32,
        (_index + 1) * 32
      );
      return (int256(uint256(Bytes.slice32(_blob, 0))));
    }
  }

  /** Push an element to mapArray */
  function pushMapArray(bytes32 key, int256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.pushToField(_tableId, _keyTuple, 2, abi.encodePacked((_element)), getValueSchema());
  }

  /** Push an element to mapArray (using the specified store) */
  function pushMapArray(IStore _store, bytes32 key, int256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.pushToField(_tableId, _keyTuple, 2, abi.encodePacked((_element)), getValueSchema());
  }

  /** Pop an element from mapArray */
  function popMapArray(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.popFromField(_tableId, _keyTuple, 2, 32, getValueSchema());
  }

  /** Pop an element from mapArray (using the specified store) */
  function popMapArray(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.popFromField(_tableId, _keyTuple, 2, 32, getValueSchema());
  }

  /**
   * Update an element of mapArray at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateMapArray(bytes32 key, uint256 _index, int256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    unchecked {
      StoreSwitch.updateInField(_tableId, _keyTuple, 2, _index * 32, abi.encodePacked((_element)), getValueSchema());
    }
  }

  /**
   * Update an element of mapArray (using the specified store) at `_index`
   * (checked only to prevent modifying other tables; can corrupt own data if index overflows)
   */
  function updateMapArray(IStore _store, bytes32 key, uint256 _index, int256 _element) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    unchecked {
      _store.updateInField(_tableId, _keyTuple, 2, _index * 32, abi.encodePacked((_element)), getValueSchema());
    }
  }

  /** Get the full data */
  function get(bytes32 key) internal view returns (MapDataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = StoreSwitch.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Get the full data (using the specified store) */
  function get(IStore _store, bytes32 key) internal view returns (MapDataData memory _table) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    bytes memory _blob = _store.getRecord(_tableId, _keyTuple, getValueSchema());
    return decode(_blob);
  }

  /** Set the full data using individual values */
  function set(bytes32 key, uint256 xLen, uint256 yLen, int256[] memory mapArray) internal {
    bytes memory _data = encode(xLen, yLen, mapArray);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using individual values (using the specified store) */
  function set(IStore _store, bytes32 key, uint256 xLen, uint256 yLen, int256[] memory mapArray) internal {
    bytes memory _data = encode(xLen, yLen, mapArray);

    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.setRecord(_tableId, _keyTuple, _data, getValueSchema());
  }

  /** Set the full data using the data struct */
  function set(bytes32 key, MapDataData memory _table) internal {
    set(key, _table.xLen, _table.yLen, _table.mapArray);
  }

  /** Set the full data using the data struct (using the specified store) */
  function set(IStore _store, bytes32 key, MapDataData memory _table) internal {
    set(_store, key, _table.xLen, _table.yLen, _table.mapArray);
  }

  /**
   * Decode the tightly packed blob using this table's schema.
   * Undefined behaviour for invalid blobs.
   */
  function decode(bytes memory _blob) internal pure returns (MapDataData memory _table) {
    // 64 is the total byte length of static data
    PackedCounter _encodedLengths = PackedCounter.wrap(Bytes.slice32(_blob, 64));

    _table.xLen = (uint256(Bytes.slice32(_blob, 0)));

    _table.yLen = (uint256(Bytes.slice32(_blob, 32)));

    // Store trims the blob if dynamic fields are all empty
    if (_blob.length > 64) {
      // skip static data length + dynamic lengths word
      uint256 _start = 96;
      uint256 _end;
      unchecked {
        _end = 96 + _encodedLengths.atIndex(0);
      }
      _table.mapArray = (SliceLib.getSubslice(_blob, _start, _end).decodeArray_int256());
    }
  }

  /** Tightly pack full data using this table's schema */
  function encode(uint256 xLen, uint256 yLen, int256[] memory mapArray) internal pure returns (bytes memory) {
    PackedCounter _encodedLengths;
    // Lengths are effectively checked during copy by 2**40 bytes exceeding gas limits
    unchecked {
      _encodedLengths = PackedCounterLib.pack(mapArray.length * 32);
    }

    return abi.encodePacked(xLen, yLen, _encodedLengths.unwrap(), EncodeArray.encode((mapArray)));
  }

  /** Encode keys as a bytes32 array using this table's schema */
  function encodeKeyTuple(bytes32 key) internal pure returns (bytes32[] memory) {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    return _keyTuple;
  }

  /* Delete all data for given keys */
  function deleteRecord(bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    StoreSwitch.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }

  /* Delete all data for given keys (using the specified store) */
  function deleteRecord(IStore _store, bytes32 key) internal {
    bytes32[] memory _keyTuple = new bytes32[](1);
    _keyTuple[0] = key;

    _store.deleteRecord(_tableId, _keyTuple, getValueSchema());
  }
}
