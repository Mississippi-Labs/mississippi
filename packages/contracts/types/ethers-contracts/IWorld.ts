/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export type PositionStruct = {
  x: PromiseOrValue<BigNumberish>;
  y: PromiseOrValue<BigNumberish>;
  proof: PromiseOrValue<BytesLike>[];
};

export type PositionStructOutput = [number, number, string[]] & {
  x: number;
  y: number;
  proof: string[];
};

export interface IWorldInterface extends utils.Interface {
  functions: {
    "CreateBox(uint16,uint16)": FunctionFragment;
    "GetSeasonInfo()": FunctionFragment;
    "SetMapMerkleRoot(bytes32)": FunctionFragment;
    "SetSeasonInfo(uint256,uint256)": FunctionFragment;
    "SetUserContract(address)": FunctionFragment;
    "battleInvitation(address,(uint16,uint16,bytes32[])[])": FunctionFragment;
    "call(bytes32,bytes)": FunctionFragment;
    "confirmBattle(bytes32,uint256)": FunctionFragment;
    "createLootBox()": FunctionFragment;
    "deleteRecord(bytes32,bytes32[],bytes32)": FunctionFragment;
    "dropLoot()": FunctionFragment;
    "emitEphemeralRecord(bytes32,bytes32[],bytes,bytes32)": FunctionFragment;
    "getBattlePlayerHp(uint256,address)": FunctionFragment;
    "getCollections(uint256,uint16,uint16)": FunctionFragment;
    "getField(bytes32,bytes32[],uint8,bytes32)": FunctionFragment;
    "getFieldLength(bytes32,bytes32[],uint8,bytes32)": FunctionFragment;
    "getFieldSlice(bytes32,bytes32[],uint8,bytes32,uint256,uint256)": FunctionFragment;
    "getInfo(address)": FunctionFragment;
    "getKeySchema(bytes32)": FunctionFragment;
    "getPosition(address)": FunctionFragment;
    "getRecord(bytes32,bytes32[],bytes32)": FunctionFragment;
    "getSenderPosition()": FunctionFragment;
    "getUserInfo(uint256)": FunctionFragment;
    "getValueSchema(bytes32)": FunctionFragment;
    "goHome()": FunctionFragment;
    "grantAccess(bytes32,address)": FunctionFragment;
    "initPlayerHp(address)": FunctionFragment;
    "initUserInfo()": FunctionFragment;
    "installModule(address,bytes)": FunctionFragment;
    "installRootModule(address,bytes)": FunctionFragment;
    "joinBattlefield()": FunctionFragment;
    "move((uint16,uint16,bytes32[])[])": FunctionFragment;
    "openBox(uint256)": FunctionFragment;
    "popFromField(bytes32,bytes32[],uint8,uint256,bytes32)": FunctionFragment;
    "pushToField(bytes32,bytes32[],uint8,bytes,bytes32)": FunctionFragment;
    "raisePlayerHp(uint256,uint256,address)": FunctionFragment;
    "registerFunctionSelector(bytes32,string,string)": FunctionFragment;
    "registerNamespace(bytes16)": FunctionFragment;
    "registerRootFunctionSelector(bytes32,bytes4,bytes4)": FunctionFragment;
    "registerStoreHook(bytes32,address)": FunctionFragment;
    "registerSystem(bytes32,address,bool)": FunctionFragment;
    "registerSystemHook(bytes32,address)": FunctionFragment;
    "registerTable(bytes32,bytes32,bytes32,string[],string[])": FunctionFragment;
    "revealBattle(uint256,bytes32,uint256,bytes32)": FunctionFragment;
    "revealBox(uint256)": FunctionFragment;
    "revealWinner(uint256)": FunctionFragment;
    "revokeAccess(bytes32,address)": FunctionFragment;
    "selectUserNft(uint256)": FunctionFragment;
    "setField(bytes32,bytes32[],uint8,bytes,bytes32)": FunctionFragment;
    "setInfo(string,string)": FunctionFragment;
    "setRecord(bytes32,bytes32[],bytes,bytes32)": FunctionFragment;
    "settleBattle()": FunctionFragment;
    "takeLoot()": FunctionFragment;
    "transfer(address,uint16,uint16)": FunctionFragment;
    "unlockUserLocation()": FunctionFragment;
    "updateInField(bytes32,bytes32[],uint8,uint256,bytes,bytes32)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "CreateBox"
      | "GetSeasonInfo"
      | "SetMapMerkleRoot"
      | "SetSeasonInfo"
      | "SetUserContract"
      | "battleInvitation"
      | "call"
      | "confirmBattle"
      | "createLootBox"
      | "deleteRecord"
      | "dropLoot"
      | "emitEphemeralRecord"
      | "getBattlePlayerHp"
      | "getCollections"
      | "getField"
      | "getFieldLength"
      | "getFieldSlice"
      | "getInfo"
      | "getKeySchema"
      | "getPosition"
      | "getRecord"
      | "getSenderPosition"
      | "getUserInfo"
      | "getValueSchema"
      | "goHome"
      | "grantAccess"
      | "initPlayerHp"
      | "initUserInfo"
      | "installModule"
      | "installRootModule"
      | "joinBattlefield"
      | "move"
      | "openBox"
      | "popFromField"
      | "pushToField"
      | "raisePlayerHp"
      | "registerFunctionSelector"
      | "registerNamespace"
      | "registerRootFunctionSelector"
      | "registerStoreHook"
      | "registerSystem"
      | "registerSystemHook"
      | "registerTable"
      | "revealBattle"
      | "revealBox"
      | "revealWinner"
      | "revokeAccess"
      | "selectUserNft"
      | "setField"
      | "setInfo"
      | "setRecord"
      | "settleBattle"
      | "takeLoot"
      | "transfer"
      | "unlockUserLocation"
      | "updateInField"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "CreateBox",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "GetSeasonInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SetMapMerkleRoot",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "SetSeasonInfo",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "SetUserContract",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "battleInvitation",
    values: [PromiseOrValue<string>, PositionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "call",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "confirmBattle",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "createLootBox",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "deleteRecord",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(functionFragment: "dropLoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "emitEphemeralRecord",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getBattlePlayerHp",
    values: [PromiseOrValue<BigNumberish>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getCollections",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFieldLength",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getFieldSlice",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getInfo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getKeySchema",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPosition",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecord",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getSenderPosition",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getUserInfo",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getValueSchema",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(functionFragment: "goHome", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "grantAccess",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initPlayerHp",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initUserInfo",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "installModule",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "installRootModule",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "joinBattlefield",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "move",
    values: [PositionStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "openBox",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "popFromField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "pushToField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "raisePlayerHp",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerFunctionSelector",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerNamespace",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerRootFunctionSelector",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerStoreHook",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSystem",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerSystemHook",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "registerTable",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealBattle",
    values: [
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "revealBox",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revealWinner",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeAccess",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "selectUserNft",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "setField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "setInfo",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRecord",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "settleBattle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "takeLoot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlockUserLocation",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "updateInField",
    values: [
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(functionFragment: "CreateBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "GetSeasonInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetMapMerkleRoot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetSeasonInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SetUserContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "battleInvitation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "call", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "confirmBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createLootBox",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "deleteRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "dropLoot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "emitEphemeralRecord",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBattlePlayerHp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCollections",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getField", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFieldLength",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getFieldSlice",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getInfo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getKeySchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getSenderPosition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getValueSchema",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "goHome", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "grantAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initPlayerHp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "initUserInfo",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "installRootModule",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "joinBattlefield",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "move", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "openBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "popFromField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "pushToField",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "raisePlayerHp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerFunctionSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerNamespace",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerRootFunctionSelector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerStoreHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSystem",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerSystemHook",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerTable",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revealBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revealBox", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "revealWinner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeAccess",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "selectUserNft",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setField", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setInfo", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setRecord", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "settleBattle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "takeLoot", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "unlockUserLocation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "updateInField",
    data: BytesLike
  ): Result;

  events: {
    "HelloWorld()": EventFragment;
    "StoreDeleteRecord(bytes32,bytes32[])": EventFragment;
    "StoreEphemeralRecord(bytes32,bytes32[],bytes)": EventFragment;
    "StoreSetField(bytes32,bytes32[],uint8,bytes)": EventFragment;
    "StoreSetRecord(bytes32,bytes32[],bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "HelloWorld"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreDeleteRecord"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreEphemeralRecord"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreSetField"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "StoreSetRecord"): EventFragment;
}

export interface HelloWorldEventObject {}
export type HelloWorldEvent = TypedEvent<[], HelloWorldEventObject>;

export type HelloWorldEventFilter = TypedEventFilter<HelloWorldEvent>;

export interface StoreDeleteRecordEventObject {
  table: string;
  key: string[];
}
export type StoreDeleteRecordEvent = TypedEvent<
  [string, string[]],
  StoreDeleteRecordEventObject
>;

export type StoreDeleteRecordEventFilter =
  TypedEventFilter<StoreDeleteRecordEvent>;

export interface StoreEphemeralRecordEventObject {
  table: string;
  key: string[];
  data: string;
}
export type StoreEphemeralRecordEvent = TypedEvent<
  [string, string[], string],
  StoreEphemeralRecordEventObject
>;

export type StoreEphemeralRecordEventFilter =
  TypedEventFilter<StoreEphemeralRecordEvent>;

export interface StoreSetFieldEventObject {
  table: string;
  key: string[];
  schemaIndex: number;
  data: string;
}
export type StoreSetFieldEvent = TypedEvent<
  [string, string[], number, string],
  StoreSetFieldEventObject
>;

export type StoreSetFieldEventFilter = TypedEventFilter<StoreSetFieldEvent>;

export interface StoreSetRecordEventObject {
  table: string;
  key: string[];
  data: string;
}
export type StoreSetRecordEvent = TypedEvent<
  [string, string[], string],
  StoreSetRecordEventObject
>;

export type StoreSetRecordEventFilter = TypedEventFilter<StoreSetRecordEvent>;

export interface IWorld extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IWorldInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CreateBox(
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    GetSeasonInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    SetMapMerkleRoot(
      _root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetSeasonInfo(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    SetUserContract(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    battleInvitation(
      _targetAddress: PromiseOrValue<string>,
      positionList: PositionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    call(
      resourceSelector: PromiseOrValue<BytesLike>,
      funcSelectorAndArgs: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    confirmBattle(
      _buffHash: PromiseOrValue<BytesLike>,
      _battleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    createLootBox(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deleteRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    dropLoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    emitEphemeralRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getBattlePlayerHp(
      _battleId: PromiseOrValue<BigNumberish>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getCollections(
      _boxId: PromiseOrValue<BigNumberish>,
      _oreAmount: PromiseOrValue<BigNumberish>,
      _treasureAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getFieldLength(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getFieldSlice(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getInfo(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getKeySchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { schema: string }>;

    getPosition(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    getRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { data: string }>;

    getSenderPosition(overrides?: CallOverrides): Promise<[number, number]>;

    getUserInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    getValueSchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string] & { schema: string }>;

    goHome(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantAccess(
      resourceSelector: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initPlayerHp(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    initUserInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    installModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    installRootModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    joinBattlefield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    move(
      moveList: PositionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    openBox(
      _boxId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    popFromField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pushToField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    raisePlayerHp(
      _targetHP: PromiseOrValue<BigNumberish>,
      _percent: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerFunctionSelector(
      resourceSelector: PromiseOrValue<BytesLike>,
      systemFunctionName: PromiseOrValue<string>,
      systemFunctionArguments: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerNamespace(
      namespace: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerRootFunctionSelector(
      resourceSelector: PromiseOrValue<BytesLike>,
      worldFunctionSelector: PromiseOrValue<BytesLike>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerStoreHook(
      table: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSystem(
      resourceSelector: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerSystemHook(
      resourceSelector: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    registerTable(
      table: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keyNames: PromiseOrValue<string>[],
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealBattle(
      _battleId: PromiseOrValue<BigNumberish>,
      _action: PromiseOrValue<BytesLike>,
      _arg: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealBox(
      _boxId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revealWinner(
      _battleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeAccess(
      resourceSelector: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    selectUserNft(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setInfo(
      name: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    settleBattle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    takeLoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transfer(
      addr: PromiseOrValue<string>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unlockUserLocation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    updateInField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      startByteIndex: PromiseOrValue<BigNumberish>,
      dataToSet: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  CreateBox(
    _x: PromiseOrValue<BigNumberish>,
    _y: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  GetSeasonInfo(
    overrides?: CallOverrides
  ): Promise<[BigNumber, BigNumber, BigNumber]>;

  SetMapMerkleRoot(
    _root: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetSeasonInfo(
    _start: PromiseOrValue<BigNumberish>,
    _end: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  SetUserContract(
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  battleInvitation(
    _targetAddress: PromiseOrValue<string>,
    positionList: PositionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  call(
    resourceSelector: PromiseOrValue<BytesLike>,
    funcSelectorAndArgs: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  confirmBattle(
    _buffHash: PromiseOrValue<BytesLike>,
    _battleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  createLootBox(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deleteRecord(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    valueSchema: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  dropLoot(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  emitEphemeralRecord(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    data: PromiseOrValue<BytesLike>,
    valueSchema: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getBattlePlayerHp(
    _battleId: PromiseOrValue<BigNumberish>,
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getCollections(
    _boxId: PromiseOrValue<BigNumberish>,
    _oreAmount: PromiseOrValue<BigNumberish>,
    _treasureAmount: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getField(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    valueSchema: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getFieldLength(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    valueSchema: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getFieldSlice(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    valueSchema: PromiseOrValue<BytesLike>,
    start: PromiseOrValue<BigNumberish>,
    end: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<string>;

  getInfo(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[string, string]>;

  getKeySchema(
    table: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getPosition(
    addr: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<[number, number]>;

  getRecord(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    valueSchema: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getSenderPosition(overrides?: CallOverrides): Promise<[number, number]>;

  getUserInfo(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
  >;

  getValueSchema(
    table: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  goHome(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantAccess(
    resourceSelector: PromiseOrValue<BytesLike>,
    grantee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initPlayerHp(
    _player: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  initUserInfo(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  installModule(
    module: PromiseOrValue<string>,
    args: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  installRootModule(
    module: PromiseOrValue<string>,
    args: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  joinBattlefield(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  move(
    moveList: PositionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  openBox(
    _boxId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  popFromField(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    byteLengthToPop: PromiseOrValue<BigNumberish>,
    valueSchema: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pushToField(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    dataToPush: PromiseOrValue<BytesLike>,
    valueSchema: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  raisePlayerHp(
    _targetHP: PromiseOrValue<BigNumberish>,
    _percent: PromiseOrValue<BigNumberish>,
    _player: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerFunctionSelector(
    resourceSelector: PromiseOrValue<BytesLike>,
    systemFunctionName: PromiseOrValue<string>,
    systemFunctionArguments: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerNamespace(
    namespace: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerRootFunctionSelector(
    resourceSelector: PromiseOrValue<BytesLike>,
    worldFunctionSelector: PromiseOrValue<BytesLike>,
    systemFunctionSelector: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerStoreHook(
    table: PromiseOrValue<BytesLike>,
    hook: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSystem(
    resourceSelector: PromiseOrValue<BytesLike>,
    system: PromiseOrValue<string>,
    publicAccess: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerSystemHook(
    resourceSelector: PromiseOrValue<BytesLike>,
    hook: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  registerTable(
    table: PromiseOrValue<BytesLike>,
    keySchema: PromiseOrValue<BytesLike>,
    valueSchema: PromiseOrValue<BytesLike>,
    keyNames: PromiseOrValue<string>[],
    fieldNames: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealBattle(
    _battleId: PromiseOrValue<BigNumberish>,
    _action: PromiseOrValue<BytesLike>,
    _arg: PromiseOrValue<BigNumberish>,
    _nonce: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealBox(
    _boxId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revealWinner(
    _battleId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeAccess(
    resourceSelector: PromiseOrValue<BytesLike>,
    grantee: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  selectUserNft(
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setField(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    data: PromiseOrValue<BytesLike>,
    valueSchema: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setInfo(
    name: PromiseOrValue<string>,
    url: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRecord(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    data: PromiseOrValue<BytesLike>,
    valueSchema: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  settleBattle(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  takeLoot(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transfer(
    addr: PromiseOrValue<string>,
    x: PromiseOrValue<BigNumberish>,
    y: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unlockUserLocation(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  updateInField(
    table: PromiseOrValue<BytesLike>,
    key: PromiseOrValue<BytesLike>[],
    schemaIndex: PromiseOrValue<BigNumberish>,
    startByteIndex: PromiseOrValue<BigNumberish>,
    dataToSet: PromiseOrValue<BytesLike>,
    valueSchema: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CreateBox(
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    GetSeasonInfo(
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber, BigNumber]>;

    SetMapMerkleRoot(
      _root: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    SetSeasonInfo(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    SetUserContract(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    battleInvitation(
      _targetAddress: PromiseOrValue<string>,
      positionList: PositionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    call(
      resourceSelector: PromiseOrValue<BytesLike>,
      funcSelectorAndArgs: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    confirmBattle(
      _buffHash: PromiseOrValue<BytesLike>,
      _battleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    createLootBox(overrides?: CallOverrides): Promise<void>;

    deleteRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    dropLoot(overrides?: CallOverrides): Promise<void>;

    emitEphemeralRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    getBattlePlayerHp(
      _battleId: PromiseOrValue<BigNumberish>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollections(
      _boxId: PromiseOrValue<BigNumberish>,
      _oreAmount: PromiseOrValue<BigNumberish>,
      _treasureAmount: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    getField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFieldLength(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFieldSlice(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    getInfo(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string, string]>;

    getKeySchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getPosition(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[number, number]>;

    getRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getSenderPosition(overrides?: CallOverrides): Promise<[number, number]>;

    getUserInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber]
    >;

    getValueSchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    goHome(overrides?: CallOverrides): Promise<void>;

    grantAccess(
      resourceSelector: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initPlayerHp(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initUserInfo(overrides?: CallOverrides): Promise<void>;

    installModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    installRootModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    joinBattlefield(overrides?: CallOverrides): Promise<void>;

    move(moveList: PositionStruct[], overrides?: CallOverrides): Promise<void>;

    openBox(
      _boxId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    popFromField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    pushToField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    raisePlayerHp(
      _targetHP: PromiseOrValue<BigNumberish>,
      _percent: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerFunctionSelector(
      resourceSelector: PromiseOrValue<BytesLike>,
      systemFunctionName: PromiseOrValue<string>,
      systemFunctionArguments: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerNamespace(
      namespace: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerRootFunctionSelector(
      resourceSelector: PromiseOrValue<BytesLike>,
      worldFunctionSelector: PromiseOrValue<BytesLike>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    registerStoreHook(
      table: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSystem(
      resourceSelector: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerSystemHook(
      resourceSelector: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    registerTable(
      table: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keyNames: PromiseOrValue<string>[],
      fieldNames: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    revealBattle(
      _battleId: PromiseOrValue<BigNumberish>,
      _action: PromiseOrValue<BytesLike>,
      _arg: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    revealBox(
      _boxId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revealWinner(
      _battleId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeAccess(
      resourceSelector: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    selectUserNft(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    setField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    setInfo(
      name: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    settleBattle(overrides?: CallOverrides): Promise<void>;

    takeLoot(overrides?: CallOverrides): Promise<void>;

    transfer(
      addr: PromiseOrValue<string>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    unlockUserLocation(overrides?: CallOverrides): Promise<void>;

    updateInField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      startByteIndex: PromiseOrValue<BigNumberish>,
      dataToSet: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "HelloWorld()"(): HelloWorldEventFilter;
    HelloWorld(): HelloWorldEventFilter;

    "StoreDeleteRecord(bytes32,bytes32[])"(
      table?: null,
      key?: null
    ): StoreDeleteRecordEventFilter;
    StoreDeleteRecord(table?: null, key?: null): StoreDeleteRecordEventFilter;

    "StoreEphemeralRecord(bytes32,bytes32[],bytes)"(
      table?: null,
      key?: null,
      data?: null
    ): StoreEphemeralRecordEventFilter;
    StoreEphemeralRecord(
      table?: null,
      key?: null,
      data?: null
    ): StoreEphemeralRecordEventFilter;

    "StoreSetField(bytes32,bytes32[],uint8,bytes)"(
      table?: null,
      key?: null,
      schemaIndex?: null,
      data?: null
    ): StoreSetFieldEventFilter;
    StoreSetField(
      table?: null,
      key?: null,
      schemaIndex?: null,
      data?: null
    ): StoreSetFieldEventFilter;

    "StoreSetRecord(bytes32,bytes32[],bytes)"(
      table?: null,
      key?: null,
      data?: null
    ): StoreSetRecordEventFilter;
    StoreSetRecord(
      table?: null,
      key?: null,
      data?: null
    ): StoreSetRecordEventFilter;
  };

  estimateGas: {
    CreateBox(
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    GetSeasonInfo(overrides?: CallOverrides): Promise<BigNumber>;

    SetMapMerkleRoot(
      _root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetSeasonInfo(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    SetUserContract(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    battleInvitation(
      _targetAddress: PromiseOrValue<string>,
      positionList: PositionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    call(
      resourceSelector: PromiseOrValue<BytesLike>,
      funcSelectorAndArgs: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    confirmBattle(
      _buffHash: PromiseOrValue<BytesLike>,
      _battleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    createLootBox(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deleteRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    dropLoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    emitEphemeralRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getBattlePlayerHp(
      _battleId: PromiseOrValue<BigNumberish>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getCollections(
      _boxId: PromiseOrValue<BigNumberish>,
      _oreAmount: PromiseOrValue<BigNumberish>,
      _treasureAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFieldLength(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFieldSlice(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getInfo(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getKeySchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPosition(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getSenderPosition(overrides?: CallOverrides): Promise<BigNumber>;

    getUserInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getValueSchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    goHome(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantAccess(
      resourceSelector: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initPlayerHp(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initUserInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    installModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    installRootModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    joinBattlefield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    move(
      moveList: PositionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    openBox(
      _boxId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    popFromField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pushToField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    raisePlayerHp(
      _targetHP: PromiseOrValue<BigNumberish>,
      _percent: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerFunctionSelector(
      resourceSelector: PromiseOrValue<BytesLike>,
      systemFunctionName: PromiseOrValue<string>,
      systemFunctionArguments: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerNamespace(
      namespace: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerRootFunctionSelector(
      resourceSelector: PromiseOrValue<BytesLike>,
      worldFunctionSelector: PromiseOrValue<BytesLike>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerStoreHook(
      table: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSystem(
      resourceSelector: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerSystemHook(
      resourceSelector: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    registerTable(
      table: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keyNames: PromiseOrValue<string>[],
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealBattle(
      _battleId: PromiseOrValue<BigNumberish>,
      _action: PromiseOrValue<BytesLike>,
      _arg: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealBox(
      _boxId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revealWinner(
      _battleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeAccess(
      resourceSelector: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    selectUserNft(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setInfo(
      name: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    settleBattle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    takeLoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transfer(
      addr: PromiseOrValue<string>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unlockUserLocation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    updateInField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      startByteIndex: PromiseOrValue<BigNumberish>,
      dataToSet: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CreateBox(
      _x: PromiseOrValue<BigNumberish>,
      _y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    GetSeasonInfo(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SetMapMerkleRoot(
      _root: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetSeasonInfo(
      _start: PromiseOrValue<BigNumberish>,
      _end: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    SetUserContract(
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    battleInvitation(
      _targetAddress: PromiseOrValue<string>,
      positionList: PositionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    call(
      resourceSelector: PromiseOrValue<BytesLike>,
      funcSelectorAndArgs: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    confirmBattle(
      _buffHash: PromiseOrValue<BytesLike>,
      _battleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    createLootBox(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deleteRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    dropLoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    emitEphemeralRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getBattlePlayerHp(
      _battleId: PromiseOrValue<BigNumberish>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getCollections(
      _boxId: PromiseOrValue<BigNumberish>,
      _oreAmount: PromiseOrValue<BigNumberish>,
      _treasureAmount: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFieldLength(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFieldSlice(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      start: PromiseOrValue<BigNumberish>,
      end: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getInfo(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getKeySchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPosition(
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getSenderPosition(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getUserInfo(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getValueSchema(
      table: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    goHome(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantAccess(
      resourceSelector: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initPlayerHp(
      _player: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initUserInfo(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    installModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    installRootModule(
      module: PromiseOrValue<string>,
      args: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    joinBattlefield(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    move(
      moveList: PositionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    openBox(
      _boxId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    popFromField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      byteLengthToPop: PromiseOrValue<BigNumberish>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pushToField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      dataToPush: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    raisePlayerHp(
      _targetHP: PromiseOrValue<BigNumberish>,
      _percent: PromiseOrValue<BigNumberish>,
      _player: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerFunctionSelector(
      resourceSelector: PromiseOrValue<BytesLike>,
      systemFunctionName: PromiseOrValue<string>,
      systemFunctionArguments: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerNamespace(
      namespace: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerRootFunctionSelector(
      resourceSelector: PromiseOrValue<BytesLike>,
      worldFunctionSelector: PromiseOrValue<BytesLike>,
      systemFunctionSelector: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerStoreHook(
      table: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSystem(
      resourceSelector: PromiseOrValue<BytesLike>,
      system: PromiseOrValue<string>,
      publicAccess: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerSystemHook(
      resourceSelector: PromiseOrValue<BytesLike>,
      hook: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    registerTable(
      table: PromiseOrValue<BytesLike>,
      keySchema: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      keyNames: PromiseOrValue<string>[],
      fieldNames: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealBattle(
      _battleId: PromiseOrValue<BigNumberish>,
      _action: PromiseOrValue<BytesLike>,
      _arg: PromiseOrValue<BigNumberish>,
      _nonce: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealBox(
      _boxId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revealWinner(
      _battleId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeAccess(
      resourceSelector: PromiseOrValue<BytesLike>,
      grantee: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    selectUserNft(
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      data: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setInfo(
      name: PromiseOrValue<string>,
      url: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRecord(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      data: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    settleBattle(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    takeLoot(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transfer(
      addr: PromiseOrValue<string>,
      x: PromiseOrValue<BigNumberish>,
      y: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unlockUserLocation(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    updateInField(
      table: PromiseOrValue<BytesLike>,
      key: PromiseOrValue<BytesLike>[],
      schemaIndex: PromiseOrValue<BigNumberish>,
      startByteIndex: PromiseOrValue<BigNumberish>,
      dataToSet: PromiseOrValue<BytesLike>,
      valueSchema: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
